
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package adisys.server.boundary;

import adisys.server.strumenti.ADISysTableRendererVerifica;
import adisys.server.strumenti.DateFormatConverter;
import business.infermiere.InfermiereTO;
import business.intervento.InterventoCompletoTO;
import business.intervento.InterventoTO;
import business.intervento.Rilevazione;
import messaggistica.MainException;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import presentation.FrontController;
import presentation.RequestManager;
import adisys.server.strumenti.Record;
import messaggistica.GMessage;

/**
*
* @author Gianmarco Divittorio
* @author Nicola Gazzilli
*/
public class DialogoVerifica extends javax.swing.JDialog implements Boundary {

    private static DialogoVerifica window;
    private static ResourceBundle checkDialog = ResourceBundle.getBundle("adisys/server/property/DialogoVerifica");
    private FrontController frontController;
    private static final String DATE_FORMAT_GUI = DateFormatConverter.getFormatData();
    private static final String TIME_FORMAT_GUI ="HH:mm:ss";
    
    // Variables declaration - do not modify                     
    private javax.swing.JComboBox cbFileJournaling;
    private javax.swing.JLabel checkHeaderPicture;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane activityTablePanel;
    private javax.swing.JScrollPane logTablePanel;
    private javax.swing.JButton updateListButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JTable activityTable;
    private javax.swing.JTable logTable;
    private javax.swing.JLabel nurseTx;
    private javax.swing.JLabel surveyTx;
    // End of variables declaration 
    
    
     public static void setResourceBundle(String path, Locale local){
    	 checkDialog = ResourceBundle.getBundle(path, local);
    }
	/**
	 * Creates new form DialogoVerifica
	 */
	public DialogoVerifica(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		setJournalingList();
	}

        public DialogoVerifica(){
            
        }
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

		checkHeaderPicture = new javax.swing.JLabel();
		activityTablePanel = new javax.swing.JScrollPane();
		activityTable = new javax.swing.JTable();
        logTablePanel = new javax.swing.JScrollPane();
        logTable = new javax.swing.JTable();
        nurseTx = new javax.swing.JLabel();
        surveyTx = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        updateListButton = new javax.swing.JButton();
        cbFileJournaling = new javax.swing.JComboBox();
        loadButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        quitButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(checkDialog.getString("TITLE VERIFICA")); // NOI18N
        setIconImage(null);
        setMinimumSize(null);
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        checkHeaderPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/decorazioniFinestre/Verifica.png"))); // NOI18N

        activityTable.setRowHeight(25);
        activityTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        activityTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	activityTableMouseClicked(evt);
            }
        });
        activityTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
            	activityTableKeyPressed(evt);
            }
        });
        activityTablePanel.setViewportView(activityTable);

        logTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        logTable.getTableHeader().setReorderingAllowed(false);
        logTablePanel.setViewportView(logTable);

        nurseTx.setFont(nurseTx.getFont().deriveFont(nurseTx.getFont().getStyle() | java.awt.Font.BOLD, 14));
        nurseTx.setForeground(new java.awt.Color(255, 255, 255));
        nurseTx.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nurseTx.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/barre/Viola.png"))); // NOI18N
        nurseTx.setText(checkDialog.getString("INFERMERE: -")); // NOI18N
        nurseTx.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        surveyTx.setFont(surveyTx.getFont().deriveFont(surveyTx.getFont().getStyle() | java.awt.Font.BOLD, 14));
        surveyTx.setForeground(new java.awt.Color(255, 255, 255));
        surveyTx.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        surveyTx.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/barre/Grigia.png"))); // NOI18N
        surveyTx.setText(checkDialog.getString("LISTA RILEVAZIONI")); // NOI18N
        surveyTx.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        updateListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/IconaAggiorna.png"))); // NOI18N
        updateListButton.setText(checkDialog.getString("AGGIORNA LISTA")); // NOI18N
        updateListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	updateListActionPerformedButton(evt);
            }
        });
        jToolBar1.add(updateListButton);

        jToolBar1.add(cbFileJournaling);

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/IconaImportazione.png"))); // NOI18N
        loadButton.setText(checkDialog.getString("CARICA E VERIFICA")); // NOI18N
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	loadActionPerformedButton(evt);
            }
        });
        jToolBar1.add(loadButton);

        jLabel1.setText(checkDialog.getString("CLICCARE SU UNA SINGOLA ATTIVITA' PER LEGGERE LE RILEVAZIONI, PREMERE 'I' PER INFORMAZIONI SULL'ATTIVITÀ.")); // NOI18N

        quitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/arresta.png"))); // NOI18N
        quitButton.setText(checkDialog.getString("ABBANDONA ADISYS")); // NOI18N
        quitButton.setToolTipText(checkDialog.getString("ESCI DA ADISYS")); // NOI18N
        quitButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	quitActionPerformedButton(evt);
            }
        });

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/home.png"))); // NOI18N
        homeButton.setText(checkDialog.getString("HOME")); // NOI18N
        homeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	homeActionPerformedButton(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logTablePanel)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(quitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(homeButton)
                        .addContainerGap())
                    .addComponent(activityTablePanel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkHeaderPicture)
                            .addComponent(surveyTx)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nurseTx)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)))
                        .addGap(0, 135, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(checkHeaderPicture)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nurseTx)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activityTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(surveyTx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitButton)
                    .addComponent(homeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void updateListActionPerformedButton(java.awt.event.ActionEvent evt) {                                                      
    	setJournalingList();
    }                                                     

    private void loadActionPerformedButton(java.awt.event.ActionEvent evt) {                                               
        if(cbFileJournaling.getModel().getSelectedItem() != 
                cbFileJournaling.getModel().getElementAt(0)){
        	frontController = RequestManager.getFCInstance();
            boolean infFound = true;
            ArrayList<Record<String, Object>> params = new ArrayList<Record<String, Object>>();
            params.add(new Record<String, Object>("java.lang.String", 
                String.valueOf(cbFileJournaling.getSelectedItem())));      
            try {
                String message = (String) frontController.processRequest("caricaFile", params);
                if(message.contains(checkDialog.getString("INFERMIERE"))){
                	infFound = false;
                    GMessage.message_error(message);
                } else if(message.contains(checkDialog.getString("ANNULLATO"))){
                	infFound = false;
                    GMessage.information(message);
                } else {
                    GMessage.information(message);
                }
            } catch (MainException ex) {
                Logger.getLogger(DialogoVerifica.class.getName()).log(Level.SEVERE, null, ex);
            }

            if(infFound == true){
                String nurseString ="Infermiere: ";
                InfermiereTO toInf = new InfermiereTO();
                frontController = RequestManager.getFCInstance();
                ArrayList<InterventoCompletoTO> interventionsList = null;
                try {
                	interventionsList = (ArrayList<InterventoCompletoTO>) frontController.processRequest("visualizzaListaInterventi", null);
                } catch (MainException ex) {
                    Logger.getLogger(DialogoVerifica.class.getName()).log(Level.SEVERE, null, ex);
                }
                toInf.setID(interventionsList.get(0).getIDInfermiere());
                params.clear();
                params.add(new Record<String, Object>("business.infermiere.InfermiereTO", toInf));   
     
                try {
                    toInf = (InfermiereTO) frontController.processRequest("visualizzaInfermiere", params);
                } catch (MainException ex) {
                    Logger.getLogger(EditorInterventi.class.getName()).log(Level.SEVERE, null, ex);
                }
        
                nurseString += toInf.getNome();
                nurseString += " " + toInf.getCognome();
        
                nurseTx.setText(nurseString);
        
                //TableModel per popolamento tabella
                DefaultTableModel model = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int column)
                    {return false;}
                };
        
                //Setting columns
                String titles[] = {"IL", "DALLE","ALLE", "LUOGO","PAZIENTE","GPS","ACCEL."};
        
                model.setColumnCount(titles.length);
                model.setColumnIdentifiers(titles);
        
                if(!interventionsList.isEmpty()) {
                    for (InterventoCompletoTO i:interventionsList){
                        params.clear();
                        params.add(new Record<String, Object>("business.intervento.InterventoCompletoTO", i));
                        try {
                        	frontController.processRequest("aggiornaStorico", params);
                        } catch (MainException ex) {
                            Logger.getLogger(DialogoVerifica.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String riga[]={
                            i.getDataDaFormato(DATE_FORMAT_GUI),
                            i.getOraInizioDaFormato(TIME_FORMAT_GUI),
                            i.getOraFineDaFormato(TIME_FORMAT_GUI),
                            i.getCivico() + "- " +i.getCitta(),
                            i.getPaziente().getNome() + " " + i.getPaziente().getCognome(),
                            i.getStatoVerificaGPS().toString(),
                            i.getStatoVerificaAccelerometro().toString()
        		};
        		
                        model.addRow(riga);
                    }
                }
        
                activityTable.setModel(model);
        
                int graphicColumnGPS = 5;
                int graphicColumnACC = 6;
        
        
                ADISysTableRendererVerifica renderer = new ADISysTableRendererVerifica(graphicColumnGPS,graphicColumnACC);
                activityTable.setDefaultRenderer(activityTable.getColumnClass(0), renderer);
        
        
                ///Svuota la tabella dei log
                logTable.setModel(new DefaultTableModel());
            }
        }
    }                                              

    private void setJournalingList(){
    	frontController = RequestManager.getFCInstance();
        String[] filesList = null;
        try {
        	filesList = (String[]) frontController.processRequest("visualizzaListaJournaling", null);
        } catch (MainException ex) {
            Logger.getLogger(DialogoVerifica.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement(checkDialog.getString("SCEGLI FILE"));
        cbFileJournaling.setModel(model);
        if (filesList==null) 
            GMessage.message_error(checkDialog.getString("ERRORE CARICA LISTA"));
        else{
            for(String s:filesList) model.addElement(s);
            cbFileJournaling.setModel(model);
        }
    }
    private void quitActionPerformedButton(java.awt.event.ActionEvent evt) {                                             
        if(GMessage.confirm(checkDialog.getString("SEI SICURO DI VOLER ABBANDONARE")
            + checkDialog.getString(" ADISYS?")) == JOptionPane.YES_OPTION) {
        System.exit(0);
        }
    }                                            

    private void activityTableKeyPressed(java.awt.event.KeyEvent evt) {                                           
      
        if(evt.getKeyChar() == 'i' || evt.getKeyChar()== 'I'){
        	frontController = RequestManager.getFCInstance();
            int selectedValue = activityTable.getSelectedRow();
            if (selectedValue !=-1){
                System.out.println("ControllerVerifica - Prelievo elemento " + selectedValue);
                InterventoTO to = new InterventoTO();
                to.setID(selectedValue);
                ArrayList<Record<String, Object>> params = new ArrayList<Record<String, Object>>();
                params.add(new Record<String, Object>("business.intervento.InterventoTO", to));
                InterventoCompletoTO completeTO = null;
                try {
                	completeTO = (InterventoCompletoTO) 
                    		frontController.processRequest("visualizzaInterventoCompleto", params);
                } catch (MainException ex) {
                    Logger.getLogger(DialogoVerifica.class.getName()).log(Level.SEVERE, null, ex);
                }
            GMessage.information(completeTO.toString());
            }
        }

    }                                          

    private void activityTableMouseClicked(java.awt.event.MouseEvent evt) {                                             
        int selectedValue = activityTable.getSelectedRow();
        if (selectedValue !=-1)
        	populateLogTable(selectedValue);

    }                                            

    public void populateLogTable(int interventionIndex)
    {
    	frontController = RequestManager.getFCInstance();
        ArrayList<InterventoCompletoTO> interventionsList = null;
        try {
        	interventionsList = (ArrayList<InterventoCompletoTO>) frontController.processRequest("visualizzaListaInterventi", null);
        } catch (MainException ex) {
            Logger.getLogger(DialogoVerifica.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel logModel = new DefaultTableModel()
        {
        
        @Override
        public boolean isCellEditable(int r, int c)
            {
                return false;
            }
        };

        logModel.addColumn("Timestamp");
        logModel.addColumn("Latitude");
        logModel.addColumn("Longitude");
        logModel.addColumn("Altitude");
        logModel.addColumn("Accuracy");
        logModel.addColumn("Accel X");
        logModel.addColumn("Accel Y");
        logModel.addColumn("Accel Z");
        
        int i = 0;
        while(interventionsList.get(interventionIndex).getLog(i)!=null)
        {
            Rilevazione u =  interventionsList.get(interventionIndex).getLog(i);
            Object[] newRow=
            {
                DateFormatConverter.long2dateString(u.getTimestamp().getTime(), 
                		DATE_FORMAT_GUI + "-" + TIME_FORMAT_GUI),
                u.getGpsLatitude(),
                u.getGpsLongitude(),
                u.getGpsAltitude(),
                u.getGpsAccuracy(),
                u.getAccX(),
                u.getAccY(),
                u.getAccZ() 
            };
            logModel.addRow(newRow);
            i++;
        }    
        logTable.setModel(logModel);
    }
    
    private void homeActionPerformedButton(java.awt.event.ActionEvent evt) {                                             
        if(GMessage.confirm(checkDialog.getString("SEI SICURO DI VOLER USCIRE DAL ")
            + checkDialog.getString("DIALOGO DELLA VERIFICA E TORNARE ALLA PIANIFICAZIONE?"))
        == JOptionPane.YES_OPTION) {
        this.dispose();
        }
    }                                            

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
         if(GMessage.confirm(checkDialog.getString("SEI SICURO DI VOLER USCIRE DAL DIALOGO DELLA VERIFICA?")
                 ) == JOptionPane.YES_OPTION) {
             this.dispose();
         }
    }                                  

	/**
	 * @param args the command line arguments
	 */
	public static void start() {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if (checkDialog.getString("NIMBUS").equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DialogoVerifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DialogoVerifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DialogoVerifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DialogoVerifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				window = new DialogoVerifica(new javax.swing.JFrame(), true);
				Dimension screenResolution = Toolkit.getDefaultToolkit().getScreenSize();
				window.setLocation(new Point( (screenResolution.width - window.getWidth()) /2, (screenResolution.height - window.getHeight()) /2)  );
				window.setVisible(true);
				
			}
		});
	}

	public void stop()
	{
		if (window!=null) window.dispose();
	}
                  

    @Override
    public void open() {
        start();
    }

}
