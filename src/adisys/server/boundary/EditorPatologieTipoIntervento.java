/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package adisys.server.boundary;

import business.intervento.PatologieTipoIntervento;
import adisys.server.strumenti.VariableTableModel;
import business.patologia.PatologiaTO;
import messaggistica.MainException;
import integration.dao.InterventoMySqlDAO;
import integration.dao.PatologiaMySqlDAO;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import presentation.FrontController;
import presentation.RequestManager;
import adisys.server.strumenti.Record;
import messaggistica.GMessage;
import javax.swing.JTable;

/**
*
* @author Gianmarco Divittorio
* @author Nicola Gazzilli
*/
public class EditorPatologieTipoIntervento extends javax.swing.JDialog implements Boundary{
    
    private static EditorInterventi tmp = null;
    private static int modifica = 0;
    private PatologieTipoIntervento listaPatologieTipoIntervento;
    //private ArrayList<Patologia> listaPatologie;
    private FrontController FC;
    private int colonnaCodice;
    private int colonnaNome;
    private int colonnaGravita;
  
    private static String NOME_COLONNA_CODICE;
    private static String NOME_COLONNA_NOME;
    private static String NOME_COLONNA_GRAVITA;
            //InterventoMySqlDAO.NOME_COLONNA_GRAVITA_PATOLOGIE_TIPI_INTERVENTI;

    private static final int LUNGHEZZAMASSIMACODICE = 6;
    private static final int LUNGHEZZAMASSIMANOME = 20;

    public static void setModifica(int flg){
        modifica = flg;
    }
    
    private static ResourceBundle editorPatologieTipoIntervento = ResourceBundle.getBundle("adisys/server/property/EditorPatologieTipoIntervento");
    
    public static void setResourceBundle(String path, Locale locale){
        editorPatologieTipoIntervento = ResourceBundle.getBundle(path, locale);
    }
     
    public static void setEditorInterventi(EditorInterventi editor){
        tmp = editor;
    }
    
    public void addValueGravita(String value){
        tabellaPatologie.setValueAt(value, tabellaPatologie.getSelectedRow(), 
                tabellaPatologie.getColumnModel().getColumnIndex(NOME_COLONNA_GRAVITA));
    }
    
	/**
	 * Creates new form dialogoPatologieTipoIntervento
	 */
	public EditorPatologieTipoIntervento(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
                try {
                    aggiornaTabella();
                } catch (MainException ex) {
                    Logger.getLogger(EditorPatologieTipoIntervento.class.getName()).log(Level.SEVERE, null, ex);}
                groupButton();
                initialRadioButton();
                setAggiungiPatologia();    
              
            
          
	}
        
        public EditorPatologieTipoIntervento() {
             
        }
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        immagineTestataInfermieri = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tabellaPatologie = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        pulsanteAggiungi = new javax.swing.JButton();
        pulsanteModifica = new javax.swing.JButton();
        pannelloModifica1 = new javax.swing.JPanel();
        txNome = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        pulsanteOK = new javax.swing.JButton();
        txID = new javax.swing.JFormattedTextField();
        pulsanteHome = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txInfo = new javax.swing.JTextArea();
        jLabel25 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        pulsanteResettaGravita = new javax.swing.JButton();
        pulsanteAssociaPatologie = new javax.swing.JButton();
        pulsanteImpostaGravita = new javax.swing.JButton();
        txModalita = new javax.swing.JTextField();
        txPatologiaSelezionata = new javax.swing.JFormattedTextField();
        pulsanteHome1 = new javax.swing.JButton();
        pulsanteEsci = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(editorPatologieTipoIntervento.getString("TITLE")); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 360));
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        immagineTestataInfermieri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/decorazioniFinestre/PatologiaTipoIntervento.png"))); // NOI18N

        tabellaPatologie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabellaPatologie.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tabellaPatologie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabellaPatologieMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tabellaPatologie);

        jLabel1.setText(editorPatologieTipoIntervento.getString("SELEZIONARE UNA PATOLOGIA, IMPOSTARE LA GRAVITÀ RELATVA AL PAZIENTE E PREMERE IL PULSANTE ASSOCIA")); // NOI18N

        pulsanteAggiungi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/IconaAggiungi.png"))); // NOI18N
        pulsanteAggiungi.setText(editorPatologieTipoIntervento.getString("AGGIUNGI PATOLOGIA")); // NOI18N
        pulsanteAggiungi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pulsanteAggiungi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteAggiungiActionPerformed(evt);
            }
        });

        pulsanteModifica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/IconaModifica.png"))); // NOI18N
        pulsanteModifica.setText(editorPatologieTipoIntervento.getString("MODIFICA PATOLOGIA")); // NOI18N
        pulsanteModifica.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pulsanteModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteModificaActionPerformed(evt);
            }
        });

        txNome.setToolTipText(editorPatologieTipoIntervento.getString("SCRIVI QUI IL NOME DELLA NUOVA PATOLOGIA")); // NOI18N

        jLabel24.setText(editorPatologieTipoIntervento.getString("NOME PATOLOGIA")); // NOI18N

        jLabel26.setText(editorPatologieTipoIntervento.getString("CODICE PATOLOGIA")); // NOI18N

        pulsanteOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/iconainseriscirossa.png"))); // NOI18N
        pulsanteOK.setText(editorPatologieTipoIntervento.getString("OK")); // NOI18N
        pulsanteOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteOKActionPerformed(evt);
            }
        });

        txID.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("000000"))));
        txID.setToolTipText(editorPatologieTipoIntervento.getString("SCRIVI QUI IL CODICE DELLA NUOVA PATOLOGIA")); // NOI18N

        pulsanteHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/home.png"))); // NOI18N
        pulsanteHome.setText(editorPatologieTipoIntervento.getString("HOME")); // NOI18N
        pulsanteHome.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pulsanteHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteHomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pannelloModifica1Layout = new javax.swing.GroupLayout(pannelloModifica1);
        pannelloModifica1.setLayout(pannelloModifica1Layout);
        pannelloModifica1Layout.setHorizontalGroup(
            pannelloModifica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloModifica1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pannelloModifica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pannelloModifica1Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pannelloModifica1Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pannelloModifica1Layout.createSequentialGroup()
                        .addGroup(pannelloModifica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pulsanteOK, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(txNome)
                            .addComponent(txID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pannelloModifica1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(pulsanteHome)))
                        .addContainerGap())))
        );
        pannelloModifica1Layout.setVerticalGroup(
            pannelloModifica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloModifica1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel26)
                .addGap(4, 4, 4)
                .addComponent(txID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pulsanteOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(pulsanteHome)
                .addContainerGap())
        );

        txInfo.setEditable(false);
        txInfo.setBackground(new java.awt.Color(240, 240, 240));
        txInfo.setLineWrap(true);
        txInfo.setText(editorPatologieTipoIntervento.getString("EditorPatologieTipoIntervento.txInfo.text")); // NOI18N
        jScrollPane2.setViewportView(txInfo);

        jLabel25.setText(editorPatologieTipoIntervento.getString("GRAVITÀ")); // NOI18N

        jRadioButton1.setText(editorPatologieTipoIntervento.getString("1")); // NOI18N

        jRadioButton2.setText(editorPatologieTipoIntervento.getString("2")); // NOI18N

        jRadioButton3.setText(editorPatologieTipoIntervento.getString("3")); // NOI18N

        jRadioButton4.setText(editorPatologieTipoIntervento.getString("4")); // NOI18N

        jRadioButton5.setText(editorPatologieTipoIntervento.getString("5")); // NOI18N

        pulsanteResettaGravita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/miniinseriscirosso.png"))); // NOI18N
        pulsanteResettaGravita.setToolTipText(editorPatologieTipoIntervento.getString("RESETTA GRAVITÀ PER LA PATOLOGIA SELEZIONATA")); // NOI18N
        pulsanteResettaGravita.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pulsanteResettaGravita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteResettaGravitaActionPerformed(evt);
            }
        });

        pulsanteAssociaPatologie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/iconainseriscirossa.png"))); // NOI18N
        pulsanteAssociaPatologie.setText(editorPatologieTipoIntervento.getString("ASSOCIA PATOLOGIE ALL'INTERVENTO")); // NOI18N
        pulsanteAssociaPatologie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteAssociaPatologieActionPerformed(evt);
            }
        });

        pulsanteImpostaGravita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/miniinserisciverde.png"))); // NOI18N
        pulsanteImpostaGravita.setToolTipText(editorPatologieTipoIntervento.getString("IMPOSTA GRAVITÀ PER LA PATOLOGIA SELEZIONATA")); // NOI18N
        pulsanteImpostaGravita.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pulsanteImpostaGravita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteImpostaGravitaActionPerformed(evt);
            }
        });

        txModalita.setEditable(false);
        txModalita.setText(editorPatologieTipoIntervento.getString("OPERAZIONE")); // NOI18N

        txPatologiaSelezionata.setEditable(false);
        txPatologiaSelezionata.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        pulsanteHome1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/arresta.png"))); // NOI18N
        pulsanteHome1.setText(editorPatologieTipoIntervento.getString("ABBANDONA ADISYS")); // NOI18N
        pulsanteHome1.setToolTipText(editorPatologieTipoIntervento.getString("ESCI DA ADISYS")); // NOI18N
        pulsanteHome1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pulsanteHome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteHome1ActionPerformed(evt);
            }
        });

        pulsanteEsci.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/indietro.png"))); // NOI18N
        pulsanteEsci.setText(editorPatologieTipoIntervento.getString("INDIETRO")); // NOI18N
        pulsanteEsci.setToolTipText(editorPatologieTipoIntervento.getString("TORNA ALL'EDITOR DEGLI INTERVENTI")); // NOI18N
        pulsanteEsci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteEsciActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(immagineTestataInfermieri)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jLabel1))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(39, 39, 39)
                                                .addComponent(jLabel25)
                                                .addGap(18, 18, 18)
                                                .addComponent(jRadioButton1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jRadioButton2)
                                                .addGap(18, 18, 18)
                                                .addComponent(jRadioButton3)
                                                .addGap(18, 18, 18)
                                                .addComponent(jRadioButton4)
                                                .addGap(18, 18, 18)
                                                .addComponent(jRadioButton5)
                                                .addGap(18, 18, 18)
                                                .addComponent(pulsanteImpostaGravita)
                                                .addGap(18, 18, 18)
                                                .addComponent(pulsanteResettaGravita)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jScrollPane2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pulsanteModifica, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pulsanteAggiungi, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txModalita, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txPatologiaSelezionata, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pulsanteHome1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pulsanteEsci)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pannelloModifica1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pulsanteAssociaPatologie, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(immagineTestataInfermieri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 57, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel25)
                                .addComponent(jRadioButton1)
                                .addComponent(jRadioButton2)
                                .addComponent(jRadioButton3)
                                .addComponent(jRadioButton4)
                                .addComponent(jRadioButton5))
                            .addComponent(pulsanteResettaGravita, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pulsanteImpostaGravita, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pulsanteAssociaPatologie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pannelloModifica1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pulsanteHome1)
                            .addComponent(pulsanteEsci)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txModalita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txPatologiaSelezionata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(pulsanteAggiungi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pulsanteModifica)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
         String msg = editorPatologieTipoIntervento.getString("SEI SICURO DI VOLER USCIRE DAL PANNELLO?");
        if(modifica == 0)
            msg = msg + editorPatologieTipoIntervento.getString(" COSI FACENDO CANCELLERAI ANCHE IL TIPO INTERVENTO APPENA AGGIUNTO");
        if(GMessage.confirm(msg) == JOptionPane.YES_OPTION) { 
            if(modifica == 0){
                DefaultTableModel newTable = tmp.modelTabellaTipiIntervento();
                tmp.setModelloTipiIntervento(newTable);
                if(tmp.getTabellaTipiIntervento().getRowCount() > 0){
                tmp.getTabellaTipiIntervento().setRowSelectionInterval(
                        tmp.getTabellaTipiIntervento().getRowCount() - 1, 
                        tmp.getTabellaTipiIntervento().getRowCount() - 1);
                }
            }
            this.dispose();
        }
    }                                  

    private void pulsanteAssociaPatologieActionPerformed(java.awt.event.ActionEvent evt) {                                                         
          int definedRows = 0;
          int numberRows = tabellaPatologie.getRowCount();
              for(int i = 0; i < numberRows; i++){
                     if(!tabellaPatologie.getValueAt(i, colonnaGravita).toString().equals("")){
                         definedRows++;
                     }
              }
         if(definedRows == 0){
             GMessage.message_error(editorPatologieTipoIntervento.getString("SELEZIONARE ALMENO UNA PATOLOGIA ")
                     + editorPatologieTipoIntervento.getString("IMPOSTANDONE LA GRAVITÀ"));
         } else {
             
        String msg = editorPatologieTipoIntervento.getString("CONFERMI DI AGGIUNGERE QUESTE PATOLOGIE?");
        if(GMessage.confirm(msg) == JOptionPane.YES_OPTION) {
            
             this.listaPatologieTipoIntervento = tmp.getPatologieTipoIntervento();
           //Intestazioni
        
            VariableTableModel modello = null;
            try {
                modello = getModelloPatologieEditor();
            } catch (MainException ex) {
                Logger.getLogger(EditorPatologieTipoIntervento.class.getName()).log(Level.SEVERE, null, ex);
            }
            modello.setRowCount(definedRows);
            
            tmp.setModelTabellaPatologie(modello);
            tmp.setColumnModelPatologieTipoIntervento();
             ArrayList<PatologiaTO> tmpList = new ArrayList<>();
             int counter = 0;
            
             for(int i = 0; i < numberRows; i++){
                     if(!tabellaPatologie.getValueAt(i, colonnaGravita).toString().equals("")){
                    	 String codice = String.valueOf(tabellaPatologie.getValueAt(i, colonnaCodice));
                    	 tmp.addValueTabellaPatologie(tabellaPatologie.getValueAt(i, colonnaCodice), counter, 
                                 colonnaCodice);
                         String nome = String.valueOf(tabellaPatologie.getValueAt(i, colonnaNome));
                         tmp.addValueTabellaPatologie(tabellaPatologie.getValueAt(i, colonnaNome), counter, 
                                 colonnaNome);
                         int gravita = Integer.parseInt(String.valueOf( tabellaPatologie.getValueAt(i, colonnaGravita)));
                         tmp.addValueTabellaPatologie(gravita, counter, colonnaGravita);
                         PatologiaTO newPatologia = new PatologiaTO(codice, nome, gravita);
                         tmpList.add(newPatologia);
                         counter++;
                 }
             }
             
             //int rowInsertTipo = tmp.getTabellaTipiIntervento().getRowCount() - 1;
             if(modifica == 0)
                 listaPatologieTipoIntervento.setListaPatologieTipoIntervento(tmpList);
             else {
                 int rowSelected = tmp.getTabellaTipiIntervento().getSelectedRow();
                 listaPatologieTipoIntervento.rewriteListaPatologieTipoIntervento(rowSelected, tmpList);
             }
                 
             tmp.setPatologieTipoIntervento(listaPatologieTipoIntervento);
             if(modifica == 0)
                 tmp.getTabellaTipiIntervento().setRowSelectionInterval(
                         tmp.getTabellaTipiIntervento().getRowCount() - 1, tmp.getTabellaTipiIntervento().getRowCount() - 1);
             this.dispose();
            }//if su modifica
       }//else su righe selezionate > 0
    }                                                        

    private void pulsanteEsciActionPerformed(java.awt.event.ActionEvent evt) {                                             

        String msg = editorPatologieTipoIntervento.getString("SEI SICURO DI VOLER USCIRE DAL PANNELLO?");
        if(modifica == 0)
            msg = msg + editorPatologieTipoIntervento.getString(" COSI FACENDO CANCELLERAI ANCHE IL TIPO INTERVENTO APPENA AGGIUNTO");
        if(GMessage.confirm(msg) == JOptionPane.YES_OPTION) { 
            if(modifica == 0){
                JTable table = tmp.getTabellaTipiIntervento();
                DefaultTableModel newTable = (DefaultTableModel) table.getModel();
                newTable.setRowCount(newTable.getRowCount() - 1);
                tmp.setModelloTipiIntervento(newTable);
                if(tmp.getTabellaTipiIntervento().getRowCount() > 0){
                tmp.getTabellaTipiIntervento().setRowSelectionInterval(
                        tmp.getTabellaTipiIntervento().getRowCount() - 1, 
                        tmp.getTabellaTipiIntervento().getRowCount() - 1);
                }
            }
            this.dispose();
        }
    }                                            

     private void resetButton() {
      
		jRadioButton1.setSelected(true);
	
    }
     
    private void groupButton(){
            ButtonGroup bg1 = new ButtonGroup();
            
            bg1.add(jRadioButton1);
            bg1.add(jRadioButton2);
            bg1.add(jRadioButton3);
            bg1.add(jRadioButton4);
            bg1.add(jRadioButton5);
            
            jRadioButton1.setSelected(true);
     }
     
    private void pulsanteAggiungiActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        resetButton();
        setAggiungiPatologia();
    }                                                

    private void setAggiungiPatologia()
	{
		//Setta la variabile modalita
		modalita=Modalita.aggiungi;
                txModalita.setText(modAggiungi);
                txPatologiaSelezionata.setText("");
		//Setta il modulo per l'inserimento
		txID.setText("");
		txNome.setText("");
		
		txInfo.setText(editorPatologieTipoIntervento.getString("AGGIUNGI UNA NUOVA PATOLOGIA INSERIRE UN CODICE DI MAX 6 CIFRE UNIVOCO ")
                        + editorPatologieTipoIntervento.getString(", UN NOME E PREMERE OK"));
	}
    
    private void pulsanteModificaActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        setModificaPatologia();
    }                                                

    private void setModificaPatologia()
	{

		if(tabellaPatologie.getSelectedRow()==-1)
                    	GMessage.information(editorPatologieTipoIntervento.getString("SELEZIONARE LA PATOLOGIA DA MODIFICARE E POI PREMERE IL PULSANTE MODIFICA INFERMIERE"));
		else
		{

		//Setta la variabile modalita
                        modalita=Modalita.modifica;
                        txModalita.setText(modModifica);
                        txPatologiaSelezionata.setText(String.valueOf(
                                new Integer(tabellaPatologie.getSelectedRow())));
			//Recupero valori ID NOME COGNOME
			Object id = tabellaPatologie.getValueAt(tabellaPatologie.getSelectedRow(), tabellaPatologie.getColumnModel().getColumnIndex(NOME_COLONNA_CODICE));
			Object nome= tabellaPatologie.getValueAt(tabellaPatologie.getSelectedRow(), tabellaPatologie.getColumnModel().getColumnIndex(NOME_COLONNA_NOME));

			//Setta il modulo per l'inserimento
			txID.setText(String.valueOf(id));
			txNome.setText(String.valueOf(nome));
                        
			txInfo.setText(editorPatologieTipoIntervento.getString("MODIFICA PATOLOGIA MODIFICARE CODICE, COGNOME E/O GRAVITÀ E PREMERE OK."));
		}   }
    
    private void pulsanteOKActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (modalita == null) {
            GMessage.information(editorPatologieTipoIntervento.getString("SELEZIONARE UNA MODALITÀ DI SCELTA"));
            return;
        }

        int rigaSelezionata = -1;
        //Aggiunta paziente
        if (modalita == Modalita.aggiungi) {
            if (datiValidi()) {
                PatologiaTO to;
                try {
                    to = getValueJustInsert();
                    ArrayList < Record < String, Object >> params = new ArrayList < Record < String, Object >> ();
                    params.add(new Record < String, Object > ("business.patologia.PatologiaTO", to));
                    try {
                        boolean ok = (boolean) FC.processRequest("creaPatologia", params);
                        if (ok) {
                            //Aggiunta alla tabella
                            String[] values = {
                                "", txID.getText(), txNome.getText().toUpperCase()
                            };

                            DefaultTableModel newTable = (DefaultTableModel) tabellaPatologie.getModel();
                            if (tabellaPatologie.getColumnCount() == 1) {
                                VariableTableModel modello = getModelloPatologieEditor();
                                tabellaPatologie.setModel(modello);
                                colonnaCodice = tabellaPatologie.getColumn(NOME_COLONNA_CODICE).getModelIndex();
                                colonnaNome = tabellaPatologie.getColumn(NOME_COLONNA_NOME).getModelIndex();
                                colonnaGravita = tabellaPatologie.getColumn(NOME_COLONNA_GRAVITA).getModelIndex();
                                TableColumn col = tabellaPatologie.getColumnModel().getColumn(0);
                                col.setMinWidth(0);
                                col.setMaxWidth(0);
                                col.setPreferredWidth(0);
                            } else {
                                tabellaPatologie.setModel(newTable);
                                newTable.addRow(values);
                            }
                            tabellaPatologie.setRowSelectionInterval(tabellaPatologie.getRowCount() - 1,
                                tabellaPatologie.getRowCount() - 1);
                            if (pulsanteModifica.isVisible() == false) {
                                pulsanteModifica.setVisible(true);
                                pulsanteAssociaPatologie.setVisible(true);
                                pulsanteImpostaGravita.setVisible(true);
                                pulsanteResettaGravita.setVisible(true);
                                jRadioButton1.setVisible(true);
                                jRadioButton2.setVisible(true);
                                jRadioButton3.setVisible(true);
                                jRadioButton4.setVisible(true);
                                jRadioButton5.setVisible(true);
                                jLabel25.setVisible(true);
                            }

                            String messaggio = java.text.MessageFormat.format(editorPatologieTipoIntervento.getString("PATOLOGIA: {0} "), new Object[] {
                                to.getCodice().toUpperCase()
                            }) + " " + to.getNome().toUpperCase() + editorPatologieTipoIntervento.getString("CREATA CON SUCCESSO!");
                            GMessage.information(messaggio);
                        } else {
                            //Caso patologia non aggiunto
                            String messaggio = editorPatologieTipoIntervento.getString("SI È VERIFICATO UN ERRORE, IMPOSSIBILE CREARE LA PATOLOGIA");
                            GMessage.message_error(messaggio);
                        }
                        setAggiungiPatologia();
                    } catch (MainException ex) {
                        Logger.getLogger(EditorPatologie.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } catch (ParseException ex) {
                    Logger.getLogger(EditorPatologie.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (modalita == Modalita.modifica) {
            rigaSelezionata = tabellaPatologie.getSelectedRow();
            if (datiValidi()) {
                PatologiaTO to;
                try {
                    to = getValueJustUpdate();
                    ArrayList < Record < String, Object >> params = new ArrayList < Record < String, Object >> ();
                    params.add(new Record < String, Object > ("business.patologia.PatologiaTO", to));
                    try {
                        boolean ok = (boolean) FC.processRequest("modificaPatologia", params);
                        if (ok) {
                            //Aggiunta al database
                            String messaggio = java.text.MessageFormat.format(editorPatologieTipoIntervento.getString("PATOLOGIA: {0} "), new Object[] {
                                tabellaPatologie.getValueAt(rigaSelezionata,
                                    tabellaPatologie.getColumnModel().getColumnIndex(PatologiaMySqlDAO.NOME_COLONNA_CODICE)).
                                toString().toUpperCase()
                            }) + " " + tabellaPatologie.getValueAt(rigaSelezionata,
                                tabellaPatologie.getColumnModel().getColumnIndex(PatologiaMySqlDAO.NOME_COLONNA_NOME)).
                            toString().toUpperCase();
                             DefaultTableModel newTable = (DefaultTableModel) tabellaPatologie.getModel();
                            newTable.setValueAt(txID.getText(), tabellaPatologie.getSelectedRow(), colonnaCodice);
                            newTable.setValueAt(txNome.getText().toUpperCase(), tabellaPatologie.getSelectedRow(), colonnaNome);
                            tabellaPatologie.setModel(newTable);
                            messaggio = messaggio + editorPatologieTipoIntervento.getString("MODIFICATA IN:") +
                                to.getCodice() + " " + to.getNome().toUpperCase() + editorPatologieTipoIntervento.getString("CON SUCCESSO!");
                            GMessage.information(messaggio);
                            setAggiungiPatologia();
                        } else {
                            //Caso patologia non aggiunto
                            String messaggio = editorPatologieTipoIntervento.getString("SI È VERIFICATO UN ERRORE, IMPOSSIBILE MODIFICARE L'INFERMIERE");
                            GMessage.message_error(messaggio);
                        }
                    } catch (MainException ex) {
                        Logger.getLogger(EditorPatologie.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(EditorPatologie.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
    }                                          

    public boolean datiValidi() {
        String messaggio = editorPatologieTipoIntervento.getString("ATTENZIONE:");
        int errori = 0;
        if (txID.getText().isEmpty()) {
            errori++;
            messaggio += editorPatologieTipoIntervento.getString("CODICE PATOLOGIA VUOTO");
        } else if (txID.getText().length() > LUNGHEZZAMASSIMACODICE) {
            errori++;
            messaggio += editorPatologieTipoIntervento.getString("CODICE PATOLOGIA TROPPO LUNGO (MAX");
            messaggio += LUNGHEZZAMASSIMACODICE + " ";
            messaggio += editorPatologieTipoIntervento.getString("CAR)");
        } else {
            int numRows = tabellaPatologie.getRowCount();
            for (int i = 0; i < numRows; i++) {
                int colonnaCodice = tabellaPatologie.getColumnModel().getColumnIndex(PatologiaMySqlDAO.NOME_COLONNA_CODICE);
                if (txID.getText().equals(tabellaPatologie.getValueAt(i, colonnaCodice))) {
                    errori++;
                    messaggio += java.text.MessageFormat.format(editorPatologieTipoIntervento.getString("CODICE {0} GIÀ PRESENTE"), new Object[] {
                        txID.getText()
                    });
                    break;
                } //if
            } //for
        }

        if (txNome.getText().isEmpty()) {
            errori++;
            messaggio += editorPatologieTipoIntervento.getString("NOME PATOLOGIA VUOTO");
        } else if (txNome.getText().length() > LUNGHEZZAMASSIMANOME) {
            errori++;
            messaggio += editorPatologieTipoIntervento.getString("NOME PATOLOGIA TROPPO LUNGO (MAX");
            messaggio += LUNGHEZZAMASSIMANOME + " ";
            messaggio += editorPatologieTipoIntervento.getString("CAR)");
        }

        if (errori == 0) return true;
        else {
            messaggio += editorPatologieTipoIntervento.getString("\n") + String.valueOf(errori) + editorPatologieTipoIntervento.getString(" ERRORI RILEVATI.");
            GMessage.message_error(messaggio);
            return false;
        }
    }
    
    /**
     * Restituisce i valori dei campi appena inseriti
     * @return una struttura dati di String con i valori appena inseriti
     * @throws ParseException 
    */
    private PatologiaTO getValueJustInsert() throws ParseException{
        PatologiaTO to = new PatologiaTO(txID.getText(), txNome.getText().toUpperCase());
        System.out.println(to);
	
        return to;	
    }
        
    /**
     * Restituisce i valori dei campi appena inseriti
     * @return una struttura dati di String con i valori appena inseriti
     * @throws ParseException 
     */
    private PatologiaTO getValueJustUpdate() throws ParseException{
        Object id = tabellaPatologie.getValueAt(tabellaPatologie.getSelectedRow(),
                tabellaPatologie.getColumnModel().getColumnIndex(PatologiaMySqlDAO.NOME_COLONNA_ID));
        String codice = txID.getText();
        PatologiaTO to = new PatologiaTO(Integer.parseInt(id.toString()), codice,  txNome.getText().toUpperCase());
        System.out.println(to);	
        return to;	
    }

    private void tabellaPatologieMouseClicked(java.awt.event.MouseEvent evt) {                                              
  
        if(tabellaPatologie.getColumnCount() != 1){
            String valueGravita = tabellaPatologie.getValueAt(tabellaPatologie.getSelectedRow(), colonnaGravita).toString();
            if(!valueGravita.equals(""))
                setSelectedRadioButton(Integer.parseInt(valueGravita));
            else resetButton();
        }
        
    }                                             

    private void pulsanteResettaGravitaActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        tabellaPatologie.setValueAt("", tabellaPatologie.getSelectedRow(), colonnaGravita);
    }                                                      

    private void pulsanteImpostaGravitaActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        if(tabellaPatologie.getSelectedRow() == -1){
            GMessage.information(editorPatologieTipoIntervento.getString("SELEZIONARE UNA PATOLOGIA A CUI ASSEGNARE LA GRAVITÀ"));
            return;
        }
        int valoreScelto = 0;
        if(jRadioButton1.isSelected()){
            valoreScelto = 1;
        }
        if(jRadioButton2.isSelected()){
            valoreScelto = 2;
        }
        if(jRadioButton3.isSelected()){
           valoreScelto = 3;
        }
        if(jRadioButton4.isSelected()){
            valoreScelto = 4;
        }
        if(jRadioButton5.isSelected()){
            valoreScelto = 5;
        }
      
        int numTipiIntervento = tmp.getTabellaTipiIntervento().getRowCount();
        if(numTipiIntervento > 1){
            boolean trovato = false;
            int precGravita = 0;
            int tipoInterventoSelezionato = tmp.getTabellaTipiIntervento().getSelectedRow();
            listaPatologieTipoIntervento = tmp.getPatologieTipoIntervento();
            ArrayList<PatologiaTO>[] listaPatologie = listaPatologieTipoIntervento.getListaInterventiPatologie();
            for(int i = 0; i < listaPatologie.length; i++){
                for(PatologiaTO e : listaPatologie[i]){
                    if(e.getCodice() == tabellaPatologie.getValueAt(tabellaPatologie.getSelectedRow(), colonnaCodice)
                            && e.getGravita() != valoreScelto && i != tipoInterventoSelezionato){
                        precGravita = e.getGravita();
                        trovato = true;
                        break;
                    }//if su patologia già trovata con valore diverso
                    if(trovato == true)
                        break;
                }//for-each su patologie
            }//for su listaPatologie
            if(trovato == true){
                String msg =  editorPatologieTipoIntervento.getString("SI VUOLE IMPOSTARE")
                                + java.text.MessageFormat.format(editorPatologieTipoIntervento.getString(" LA GRAVITÀ {0} PER UN PATOLOGIA"), new Object[] {valoreScelto})
                                + editorPatologieTipoIntervento.getString(" ASSOCIATA AD ALTRI TIPI DI INTERVENTO ")
                                + java.text.MessageFormat.format(editorPatologieTipoIntervento.getString("CON UNA GRAVITÀ DIVERSA ({0})."), new Object[] {precGravita})
                                + editorPatologieTipoIntervento.getString("SE SI SCEGLIE DI PROSEGUIRE VERRÀ MODIFICATA ANCHE")
                                + editorPatologieTipoIntervento.getString("LA GRAVITA DELLA STESSA PATOLOGIA ASSOCIATA")
                                + editorPatologieTipoIntervento.getString(" AGLI ALTRI TIPI DI INTERVENTO ")
                                +  java.text.MessageFormat.format(editorPatologieTipoIntervento.getString("DA {0} A {1}."), new Object[] {precGravita, valoreScelto})
                                + editorPatologieTipoIntervento.getString("ALTRIMENTI ALLA RIGA SELEZIONATA VERRÀ SETTATA LA")
                                + java.text.MessageFormat.format(editorPatologieTipoIntervento.getString("GRAVITÀ {0} GIÀ PRECEDENTEMENTE "), new Object[] {precGravita})
                                + editorPatologieTipoIntervento.getString("IMPOSTATA.");
                        if(GMessage.confirm(msg) == JOptionPane.YES_OPTION) { 
                            for(int i = 0; i < listaPatologie.length; i++){
                                for(PatologiaTO e : listaPatologie[i]){
                                     if(e.getCodice() == tabellaPatologie.getValueAt(tabellaPatologie.getSelectedRow(), colonnaCodice)
                                             && e.getGravita() != valoreScelto){
                                         e.setGravita(valoreScelto);
                                         tabellaPatologie.setValueAt(String.valueOf(new Integer(valoreScelto)),
                                                 tabellaPatologie.getSelectedRow(), colonnaGravita);
                                         setSelectedRadioButton(valoreScelto);
                                         break;
                                     }
                                }
                            }
                        } else {
                            tabellaPatologie.setValueAt(String.valueOf(new Integer(precGravita)),
                                    tabellaPatologie.getSelectedRow(), colonnaGravita);
                            setSelectedRadioButton(precGravita);
                        }//else su risposta jOption
                        return;
            }
        }//if su numeroTipiIntervento
        tabellaPatologie.setValueAt(String.valueOf(new Integer(valoreScelto)),
                                 tabellaPatologie.getSelectedRow(), colonnaGravita);
    }                                                      

    private void pulsanteHomeActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(GMessage.confirm(editorPatologieTipoIntervento.getString("SEI SICURO DI VOLER USCIRE DALL'")
            + editorPatologieTipoIntervento.getString("EDITOR DELLE PATOLOGIE LEGATE AI TIPI INTERVENTO E TORNARE ALLA HOME? SARANNO PERSE")
                + editorPatologieTipoIntervento.getString(" TUTTE LE INFORMAZIONI SULL'INTERVENTO CHE SI STA CREANDO."))
        == JOptionPane.YES_OPTION) {
            this.dispose();
            tmp.dispose();
        }
    }                                            

    private void pulsanteHome1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(GMessage.confirm(editorPatologieTipoIntervento.getString("SEI SICURO DI VOLER ABBANDONARE")
                + editorPatologieTipoIntervento.getString(" ADISYS?")) == JOptionPane.YES_NO_OPTION) {
            System.exit(0);
        }
    }                                             

    public void initialRadioButton(){
        listaPatologieTipoIntervento = tmp.getPatologieTipoIntervento();
        ArrayList<PatologiaTO>[] lista = listaPatologieTipoIntervento.getListaInterventiPatologie();
        for(int i = 0; i < lista.length; i++){
          if(i == tmp.getTabellaTipiIntervento().getSelectedRow())
                if(lista[i].size() == 1)
                   setSelectedRadioButton(lista[i].get(0).getGravita());
        }
    }
    
    public void setSelectedRadioButton(int value){
         if(value == 1)
             jRadioButton1.setSelected(true);
         if(value == 2)
             jRadioButton2.setSelected(true);
         if(value == 3)
             jRadioButton3.setSelected(true);
         if(value == 4)
             jRadioButton4.setSelected(true);
         if(value == 5)
             jRadioButton5.setSelected(true);
    }
	/**
	 * @param args the command line arguments
	 */
	public static void start() {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if (editorPatologieTipoIntervento.getString("NIMBUS").equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(EditorPatologieTipoIntervento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(EditorPatologieTipoIntervento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(EditorPatologieTipoIntervento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(EditorPatologieTipoIntervento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				EditorPatologieTipoIntervento window = new EditorPatologieTipoIntervento(new javax.swing.JFrame(), true);
				Dimension risoluzioneSchermo = Toolkit.getDefaultToolkit().getScreenSize();
				window.setLocation(new Point( (risoluzioneSchermo.width - window.getWidth()) /2, (risoluzioneSchermo.height - window.getHeight()) /2)  );

				window.setVisible(true);
			}
		});
	}

	public void aggiornaTabella() throws MainException{
                
            VariableTableModel modello = getModelloPatologieEditor();

            NOME_COLONNA_CODICE = PatologiaMySqlDAO.NOME_COLONNA_CODICE;
                NOME_COLONNA_NOME = PatologiaMySqlDAO.NOME_COLONNA_NOME;
                NOME_COLONNA_GRAVITA = InterventoMySqlDAO.COLUMN_PATHOLOGIES_SEVERITY_INTERVENTIONS_TYPES_NAME;
            if(modello.getColumnCount() == 0){
                modello.addColumn("");
                String[] msg = {editorPatologieTipoIntervento.getString("NON È STATA TROVATA ALCUNA PATOLOGIA REGISTRATA NEL")
                        + editorPatologieTipoIntervento.getString(" SISTEMA. CREARNE NUOVE PER POTERLE ASSEGNARE AGLI INTERVENTI")};
                modello.addRow(msg);
                tabellaPatologie.setModel(modello);
                pulsanteModifica.setVisible(false);
                pulsanteAssociaPatologie.setVisible(false);
                pulsanteImpostaGravita.setVisible(false);
                pulsanteResettaGravita.setVisible(false);
                jRadioButton1.setVisible(false);
                jRadioButton2.setVisible(false);
                jRadioButton3.setVisible(false);
                jRadioButton4.setVisible(false);
                jRadioButton5.setVisible(false);
                jLabel25.setVisible(false);
                return;
            }
            
            tabellaPatologie.setModel(modello);
            colonnaCodice = tabellaPatologie.getColumn(NOME_COLONNA_CODICE).getModelIndex();
            
            colonnaNome = tabellaPatologie.getColumn(NOME_COLONNA_NOME).getModelIndex();
            colonnaGravita = tabellaPatologie.getColumn(NOME_COLONNA_GRAVITA).getModelIndex();
            TableColumn col = tabellaPatologie.getColumnModel().getColumn(
                    tabellaPatologie.getColumnModel().getColumnIndex(PatologiaMySqlDAO.NOME_COLONNA_ID));
            col.setMinWidth(0);
            col.setMaxWidth(0);
            col.setPreferredWidth(0);
            
            FC = RequestManager.getFCInstance();
            ArrayList<PatologiaTO> listaPatologie = (ArrayList<PatologiaTO>) FC.processRequest("visualizzaListaPatologie", null);
            int cont = 0;
            for(PatologiaTO e : listaPatologie){
                tabellaPatologie.setValueAt(e.getCodice(), cont, colonnaCodice);
                tabellaPatologie.setValueAt(e.getNome(), cont, colonnaNome);
                tabellaPatologie.setValueAt("", cont, colonnaGravita);
                cont++;
            }
            
            if(modifica == 1){
                listaPatologieTipoIntervento = tmp.getPatologieTipoIntervento();
                int rowSelectedEdInterventi = tmp.getTabellaTipiIntervento().getSelectedRow();
                ArrayList<PatologiaTO> list = listaPatologieTipoIntervento.getListaPatologieTipoIntervento(rowSelectedEdInterventi);
                String[] codArray = new String[list.size()];
                String[] gravitaArray = new String[list.size()];
                int i = 0;
                for(PatologiaTO e : list){
                    codArray[i] = e.getCodice();
                    gravitaArray[i] = String.valueOf(e.getGravita());
                    i++;
                } 
                for(i = 0; i < tabellaPatologie.getRowCount(); i++){
                    for(int k = 0; k < codArray.length; k++){
                        if(tabellaPatologie.getValueAt(i, colonnaCodice) == codArray[k]){
                        	tabellaPatologie.addRowSelectionInterval(i, i);
                                tabellaPatologie.setValueAt(gravitaArray[k], i, 
                                        tabellaPatologie.getColumnModel().getColumnIndex(NOME_COLONNA_GRAVITA));
                            break;
                        }//if
                    }//for su k
                }//for su i
            }//if modifica
	}//aggiorna tabella
        
        public VariableTableModel getModelloPatologieEditor() throws MainException
        {   
            FC = RequestManager.getFCInstance();
            TableModel tabellaPatologie = (AbstractTableModel) FC.processRequest("visualizzaPatologie", null);
            VariableTableModel tabellaEditorPatologie = new VariableTableModel();
            if(tabellaPatologie.getRowCount() != 0){
                for(int i = 0; i < tabellaPatologie.getColumnCount(); i++){
                    tabellaEditorPatologie.addColumn(tabellaPatologie.getColumnName(i));
                }
                tabellaEditorPatologie.addColumn(InterventoMySqlDAO.COLUMN_PATHOLOGIES_SEVERITY_INTERVENTIONS_TYPES_NAME);
                tabellaEditorPatologie.setRowCount(tabellaPatologie.getRowCount());
                for(int i = 0; i < tabellaEditorPatologie.getRowCount(); i++){
                    for(int k = 0; k < tabellaEditorPatologie.getColumnCount() - 1; k++){
                        tabellaEditorPatologie.setValueAt(tabellaPatologie.getValueAt(i, k), i, k);
                    }
                }
            } 
            //Creazione modello
            return tabellaEditorPatologie;
        }
        
    // Variables declaration - do not modify                     
    private javax.swing.JLabel immagineTestataInfermieri;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPanel pannelloModifica1;
    private javax.swing.JButton pulsanteAggiungi;
    private javax.swing.JButton pulsanteAssociaPatologie;
    private javax.swing.JButton pulsanteEsci;
    private javax.swing.JButton pulsanteHome;
    private javax.swing.JButton pulsanteHome1;
    private javax.swing.JButton pulsanteImpostaGravita;
    private javax.swing.JButton pulsanteModifica;
    private javax.swing.JButton pulsanteOK;
    private javax.swing.JButton pulsanteResettaGravita;
    private javax.swing.JTable tabellaPatologie;
    private javax.swing.JFormattedTextField txID;
    private javax.swing.JTextArea txInfo;
    private javax.swing.JTextField txModalita;
    private javax.swing.JTextField txNome;
    private javax.swing.JFormattedTextField txPatologiaSelezionata;
    // End of variables declaration                   

    @Override
    public void open() {
        start();
    }
    
    private enum Modalita{aggiungi, modifica};
    private Modalita modalita;
     private final String modAggiungi = editorPatologieTipoIntervento.getString("AGGIUNGI");
    private final String modModifica = editorPatologieTipoIntervento.getString("MODIFICA N.");
    //private int rigaSelezionata = -1;
}
