/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package adisys.server.boundary;

import adisys.server.strumenti.Record;
import adisys.server.strumenti.VariableTableModel;
import business.intervento.InterventoTO;
import business.intervento.TipoIntervento;
import business.patologia.PatologiaTO;
import messaggistica.GMessage;
import messaggistica.MainException;
import integration.dao.InterventoMySqlDAO;
import integration.dao.PatologiaMySqlDAO;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import presentation.FrontController;
import presentation.RequestManager;
/**
 *
 * @author Gianmarco Divittorio
 * @author Nicola Gazzilli
 */

public class DialogoStorico extends javax.swing.JDialog implements Boundary {

	private FrontController FC;
	private static EditorInfermieri tmp;
	private static String COLUMN_CODE_NAME;
	private static String COLUMN_NAME;
	private static String SEVERITY_COLUMN_NAME;

	// Variables declaration - do not modify                     
	private javax.swing.JLabel headerRipPathologiesPic;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane8;
	private javax.swing.JLabel interventionsLabel;
	private javax.swing.JLabel pathologiesLabel;
	private javax.swing.JLabel typesLabel;
	private javax.swing.JButton quitButton;
	private javax.swing.JButton quitButton1;
	private javax.swing.JButton homeButton;
	private javax.swing.JTable interventionsTable;
	private javax.swing.JTable pathologiesTable;
	private javax.swing.JTable typesTable;
	// End of variables declaration  

	private static ResourceBundle registerDialog = ResourceBundle.getBundle("adisys/server/property/DialogoStorico");
	public static void setResourceBundle(String path, Locale local){
		registerDialog = ResourceBundle.getBundle(path, local);
	}

	public static void setNursesEditor(EditorInfermieri nursesEditor){
		tmp = nursesEditor;
	}

	/**
	 * Creates new form dialogoPatologieTipoIntervento
	 */

	public DialogoStorico(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		try {
			initComponents();
			updateTable();
			getEmptyTypesModel();
			getEmptyPathologiesModel();
		} catch (MainException ex) {
			Logger.getLogger(DialogoStorico.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public DialogoStorico(){

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {

		headerRipPathologiesPic = new javax.swing.JLabel();
		jScrollPane8 = new javax.swing.JScrollPane();
		interventionsTable = new javax.swing.JTable();
		jScrollPane1 = new javax.swing.JScrollPane();
		typesTable = new javax.swing.JTable();
		jScrollPane2 = new javax.swing.JScrollPane();
		pathologiesTable = new javax.swing.JTable();
		interventionsLabel = new javax.swing.JLabel();
		typesLabel = new javax.swing.JLabel();
		pathologiesLabel = new javax.swing.JLabel();
		quitButton = new javax.swing.JButton();
		homeButton = new javax.swing.JButton();
		quitButton1 = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle(registerDialog.getString("TITLE")); // NOI18N
		setMinimumSize(null);
		setModal(true);
		setResizable(false);
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				formWindowClosing(evt);
			}
		});

		headerRipPathologiesPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/decorazioniFinestre/DialogoStorico.png"))); // NOI18N

		interventionsTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
						{null, null, null, null},
						{null, null, null, null},
						{null, null, null, null},
						{null, null, null, null}
				},
				new String [] {
						"Title 1", "Title 2", "Title 3", "Title 4"
				}
				));
		interventionsTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		interventionsTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				interventionsTableMouseClicked(evt);
			}
		});
		jScrollPane8.setViewportView(interventionsTable);

		typesTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {

				},
				new String [] {

				}
				));
		typesTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				typesTableMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(typesTable);

		pathologiesTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
						{},
						{},
						{},
						{}
				},
				new String [] {

				}
				));
		jScrollPane2.setViewportView(pathologiesTable);

		interventionsLabel.setFont(interventionsLabel.getFont().deriveFont(interventionsLabel.getFont().getStyle() | java.awt.Font.BOLD, 14));
		interventionsLabel.setForeground(new java.awt.Color(255, 255, 255));
		interventionsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		interventionsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/barre/Azzurra.png"))); // NOI18N
		interventionsLabel.setText(registerDialog.getString("DialogoStorico.labelInterventi.text")); // NOI18N
		interventionsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

		typesLabel.setFont(typesLabel.getFont().deriveFont(typesLabel.getFont().getStyle() | java.awt.Font.BOLD, 14));
		typesLabel.setForeground(new java.awt.Color(255, 255, 255));
		typesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		typesLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/barre/Verde.png"))); // NOI18N
		typesLabel.setText(registerDialog.getString("DialogoStorico.labelTipi.text")); // NOI18N
		typesLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

		pathologiesLabel.setFont(pathologiesLabel.getFont().deriveFont(pathologiesLabel.getFont().getStyle() | java.awt.Font.BOLD, 14));
		pathologiesLabel.setForeground(new java.awt.Color(255, 255, 255));
		pathologiesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		pathologiesLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/barre/arancione.png"))); // NOI18N
		pathologiesLabel.setText(registerDialog.getString("DialogoStorico.labelPatologie.text")); // NOI18N
		pathologiesLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

		quitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/arresta.png"))); // NOI18N
		quitButton.setText(registerDialog.getString("DialogoStorico.pulsanteEsci.text")); // NOI18N
		quitButton.setToolTipText(registerDialog.getString("DialogoStorico.pulsanteEsci.toolTipText")); // NOI18N
		quitButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		quitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				quitActionPerformedButton(evt);
			}
		});

		homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/home.png"))); // NOI18N
		homeButton.setText(registerDialog.getString("DialogoStorico.pulsanteHome.text")); // NOI18N
		homeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		homeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				homeActionPerformedButton(evt);
			}
		});

		quitButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adisys/server/img/pulsanti/indietro.png"))); // NOI18N
		quitButton1.setText(registerDialog.getString("DialogoStorico.pulsanteEsci1.text")); // NOI18N
		quitButton1.setToolTipText(registerDialog.getString("DialogoStorico.pulsanteEsci1.toolTipText")); // NOI18N
		quitButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				quit1ActionPerformedButton(evt);
			}
		});

		jLabel1.setText(registerDialog.getString("SPIEGAZIONE")); // NOI18N

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(headerRipPathologiesPic)
						.addGap(0, 0, Short.MAX_VALUE))
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane8)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
												.addComponent(quitButton)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(homeButton)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(quitButton1))
												.addGroup(layout.createSequentialGroup()
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(interventionsLabel)
																.addComponent(jLabel1)
																.addGroup(layout.createSequentialGroup()
																		.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(typesLabel)
																				.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
																				.addGap(18, 18, 18)
																				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(pathologiesLabel))))
																						.addGap(0, 0, Short.MAX_VALUE)))
																						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(headerRipPathologiesPic)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(interventionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(6, 6, 6)
						.addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(pathologiesLabel)
								.addComponent(typesLabel))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
										.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(quitButton)
												.addComponent(homeButton)
												.addComponent(quitButton1))
												.addContainerGap())
				);

		pack();
	}// </editor-fold>                        

	private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
		String msg = registerDialog.getString("SEI SICURO DI VOLER USCIRE DAL PANNELLO?");
		if(GMessage.confirm(msg) == JOptionPane.YES_OPTION) {
			this.dispose();
		}
	}                                  

	private void interventionsTableMouseClicked(java.awt.event.MouseEvent evt) {                                               
		int selectRow = interventionsTable.getSelectedRow();
		int columnID = interventionsTable.getColumnModel().getColumnIndex(InterventoMySqlDAO.COLUMN_ID_NAME);
		int id = Integer.valueOf(interventionsTable.getValueAt(selectRow, columnID).toString());
		DefaultTableModel typesInterventionsModel = getInterventionTypes(id);
		typesTable.setModel(typesInterventionsModel);

		DefaultTableModel pathologiesTypeInterventionModel = getInterventionPathologies(Integer.valueOf(interventionsTable.getValueAt(selectRow, columnID).toString()));
		pathologiesTable.setModel(pathologiesTypeInterventionModel);

	}                                              

	private void typesTableMouseClicked(java.awt.event.MouseEvent evt) {                                         
		ArrayList<PatologiaTO> currentList = new ArrayList<>();
		int currentRow = typesTable.getSelectedRow();
		FC = RequestManager.getFCInstance();
		int columnID = interventionsTable.getColumn(InterventoMySqlDAO.COLUMN_ID_NAME).getModelIndex();
		int idInt = Integer.parseInt(interventionsTable.getValueAt(interventionsTable.getSelectedRow(), columnID).toString());

		InterventoTO to = new InterventoTO();
		to.setID(idInt);
		ArrayList<Record<String, Object>> params = new ArrayList<>();
		params.add(new Record<String, Object>("business.intervento.InterventoTO", to));
		try {
			to = (InterventoTO) FC.processRequest("visualizzaIntervento", params);
		} catch (MainException ex) {
			Logger.getLogger(DialogoStorico.class.getName()).log(Level.SEVERE, null, ex);
		}
		TipoIntervento selectedInterventionType = to.getTipoIntervento(currentRow);
		currentList = selectedInterventionType.getListaPatologie();


		int columnCode = pathologiesTable.getColumnModel().getColumnIndex(COLUMN_CODE_NAME);
		int columnName = pathologiesTable.getColumnModel().getColumnIndex(COLUMN_NAME);
		int columnSeverity = pathologiesTable.getColumnModel().getColumnIndex(SEVERITY_COLUMN_NAME);

		DefaultTableModel model = (DefaultTableModel) pathologiesTable.getModel();
		model.setRowCount(currentList.size());

		setModelPathologiesTable(model);

		for(int i = 0; i < currentList.size(); i++){
			pathologiesTable.setValueAt(currentList.get(i).getCodice(), i, 
					columnCode);
			pathologiesTable.setValueAt(currentList.get(i).getNome(), i, 
					columnName);
			pathologiesTable.setValueAt(currentList.get(i).getGravita(), i, columnSeverity);
		}
	}                                        

	private void quitActionPerformedButton(java.awt.event.ActionEvent evt) {                                             
		if(GMessage.confirm(registerDialog.getString("SEI SICURO DI VOLER ABBANDONARE ADISYS?"))
				== JOptionPane.YES_OPTION) {
			System.exit(0);
		}
	}                                            

	private void homeActionPerformedButton(java.awt.event.ActionEvent evt) {                                             
		if(GMessage.confirm(registerDialog.getString("SEI SICURO DI VOLER TORNARE ALLA HOME?"))
				== JOptionPane.YES_OPTION) {
			this.dispose();
			tmp.dispose();
		}
	}                                            

	private void quit1ActionPerformedButton(java.awt.event.ActionEvent evt) {                                              

		String msg = registerDialog.getString("SEI SICURO DI VOLER TORNARE ALL'EDITOR DEGLI INFERMIERI");
		if(GMessage.confirm(msg) == JOptionPane.YES_OPTION) {
			this.dispose();
		}
	}                                             

	public void setModelPathologiesTable(DefaultTableModel modello){
		pathologiesTable.setModel(modello);
	}


	private VariableTableModel getEmptyPathologiesModel() {
		//Intestazioni
		VariableTableModel emptyPathologiesTable = new VariableTableModel();
		emptyPathologiesTable.addColumn(PatologiaMySqlDAO.NOME_COLONNA_CODICE);
		emptyPathologiesTable.addColumn(PatologiaMySqlDAO.NOME_COLONNA_NOME);
		emptyPathologiesTable.addColumn(InterventoMySqlDAO.NOME_COLONNA_GRAVITA_PATOLOGIE_TIPI_INTERVENTI);

		//Creazione modello
		return emptyPathologiesTable;
	}

	public DefaultTableModel getInterventionPathologies(int interventionID) {
		DefaultTableModel pathologiesModel = getEmptyPathologiesModel();
		//Recupero dati sui tipi di intervento
		InterventoTO to = new InterventoTO();
		to.setID(interventionID);
		ArrayList<Record<String, Object>> params = new ArrayList<>();
		params.add(new Record<String, Object>("business.intervento.InterventoTO", to));
		ArrayList<PatologiaTO> pathologies = null;
		try {
			pathologies = (ArrayList<PatologiaTO>) FC.processRequest("visualizzaPatologieIntervento", params);
		} catch (MainException ex) {
			Logger.getLogger(EditorInterventi.class.getName()).log(Level.SEVERE, null, ex);
		}
		for(PatologiaTO t: pathologies){
			String[] values = {t.getCodice(),t.getNome(), String.valueOf(new Integer(t.getGravita()))};
			pathologiesModel.addRow(values);
		}
		return pathologiesModel;            
	}

	public DefaultTableModel getInterventionTypes(int interventionID){
		FC = RequestManager.getFCInstance();
		DefaultTableModel typesModel = getEmptyTypesModel();
		//Recupero dati sui tipi di intervento
		//TODO Caricamento numeri di cellulare
		InterventoTO to = new InterventoTO();
		to.setID(interventionID);
		ArrayList<Record<String, Object>> params = new ArrayList<>();
		params.add(new Record<String, Object>("business.intervento.InterventoTO", to));
		ArrayList<TipoIntervento> types = null;
		try {
			types = (ArrayList<TipoIntervento>) FC.processRequest("visualizzaTipiIntervento", params);
		} catch (MainException ex) {
			Logger.getLogger(EditorInterventi.class.getName()).log(Level.SEVERE, null, ex);
		}

		for(TipoIntervento t: types)
		{
			String[] values = {t.getNome(),t.getNote()};
			typesModel.addRow(values);
		}
		return typesModel;

	}

	public static DefaultTableModel getEmptyTypesModel(){
		//Intestazioni
		String NAME_COLUMN_NAME_TYPE_INTERVENTION = registerDialog.getString("TIPO");
		String NAME_COLUMN_NOTES_TYPE_INTERVENTION = registerDialog.getString("NOTE");
		String[] columns = { NAME_COLUMN_NAME_TYPE_INTERVENTION, NAME_COLUMN_NOTES_TYPE_INTERVENTION};

		//Creazione modello
		return new DefaultTableModel(columns,0);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void start() {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DialogoStorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DialogoStorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DialogoStorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DialogoStorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				DialogoStorico window = new DialogoStorico(new javax.swing.JFrame(), true);
				Dimension screenResolution = Toolkit.getDefaultToolkit().getScreenSize();
				window.setLocation(new Point( (screenResolution.width - window.getWidth()) /2, (screenResolution.height - window.getHeight()) /2)  );

				window.setVisible(true);
			}
		});
	}

	public void updateTable() throws MainException{

		COLUMN_CODE_NAME = PatologiaMySqlDAO.NOME_COLONNA_CODICE;
		COLUMN_NAME = PatologiaMySqlDAO.NOME_COLONNA_NOME;
		SEVERITY_COLUMN_NAME = InterventoMySqlDAO.NOME_COLONNA_GRAVITA_PATOLOGIE_TIPI_INTERVENTI;
		interventionsTable.setModel(tmp.getTabellaTipi());

	}


	//Table update




	@Override
	public void open() {
		start();
	}

}
